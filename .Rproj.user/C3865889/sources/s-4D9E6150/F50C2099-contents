---
title: "Barcharts with ggplot2"
---

```{r, include=FALSE}
options(knitr.duplicate.label = "allow")
knitr::opts_chunk$set(fig.width = 6, message = FALSE, warning = FALSE, comment = "", cache = F, echo = F)
library(flipbookr)
library(tidyverse)
```

# Storytelling with bar charts

A cool thing to do for your audience is to walk them through breakdowns of data.  So you can start with the universe of observations.  How many people, fish, countries, etc are in your data story? And then what is the division in that data for the outcome of interest?  And what are the potential variables that might be co-related to that outcome.  

Below, we look at an example of the titanic tragedy.

We start with a total count of people on aboard ship. 




```{r titanic, include = F}
library(tidyverse)
Titanic %>% 
  as.data.frame() %>% 
  uncount(weights = Freq) %>% 
  ggplot() +
  ggthemes::theme_igray() +
  aes(x = 1) + labs(x = NULL) + theme(axis.text.x = element_blank()) +
  geom_bar(position = 
             position_dodge2(preserve = "single")) +
  stat_count(geom = "text",
             aes(label = after_stat(count), 
                 y = after_stat(count) + 65),
             vjust = 0,
             size = 4,
             position = 
               position_dodge2(width = .9,
                               preserve = "single")) + #BREAK
  aes(fill = Survived) + 
  theme(legend.position = "top") +
  theme(legend.justification = 0) +
  scale_fill_viridis_d(option = "inferno") + #BREAK
  aes(x = Sex) + theme(axis.text.x = element_text()) + #BREAK
  facet_grid(Class~.) + 
  scale_y_continuous(expand = expansion(mult = c(.025, .3))) + #BREAK
  facet_grid(Class~Age) #BREAK

```


```{r}
embed_flipbook("titanic", 
               font_size = 90, 
               use_embed_xaringan = T,
               use_share_again = T,
               display_type = "output", 
               break_type = "user")
```


## How can we get this done? 

You might think, to get those counts, we'll have to do quite a lot of computational set up work.  But in fact ggplot2 will do this for you as you build up you plot (and break down by category). 

```{r}
embed_flipbook("titanic", 
               title = "code and titanic",
               rmd_path = "titanic_show_code.Rmd",
               url = "titanic_show_code.html",
               font_size = 90, 
               use_embed_xaringan = T,
               use_share_again = T)
```


# Positions in ggplot2


```{r positions, include=F}
library(tidyverse)
set.seed(98789)
n <- 22
tibble(type = sample(LETTERS[1:3], n, replace = T),
       state = sample(state.abb[1:4], n, replace = T),
       event_occurs = sample(c("Yes", "No"), n, replace = T)) %>% 
  ggplot() +
  ggthemes::theme_igray() +
  geom_bar(position = "dodge2") + #ROTATE
  geom_bar(position = "identity") + #ROTATE
  geom_bar(position = "fill") + #ROTATE
  geom_bar(position = position_dodge2(preserve = "single")) + #ROTATE
  geom_bar(position = position_dodge2(preserve = "single", padding = .2)) + #ROTATE
  geom_bar(position = position_dodge2(preserve = "single", reverse = T)) + #ROTATE
  geom_bar(position = position_dodge2(preserve = "total", reverse = T)) + #ROTATE
  geom_bar(position = position_dodge(preserve = "single")) + #ROTATE
  geom_bar(position = position_dodge(width = 0.6)) + #ROTATE
  geom_bar(position = "stack") + #ROTATE
  geom_bar(position = "dodge") + #ROTATE
  aes(fill = factor(event_occurs)) + 
  theme(legend.position = "top") +
  theme(legend.justification = 0) +
  scale_fill_manual(values = c("plum4", "goldenrod1") ) + 
  aes(x = type) + 
  facet_grid(state~.) + 
  scale_y_continuous(expand = expansion(mult = c(.025, .3))) 
```


```{r}
embed_flipbook("positions",
               break_type =  "rotate",
               font_size = 80, 
               use_embed_xaringan = T,
               use_share_again = T,
               widths = c(1.2,1))
```



# Position 'waldo'

To get position "waldo" (ensuring that aligned fill categories), you need to work a bit harder.  You do need to calculate the heights associated with the columns, including zero height columns.

To prep the data

- declare the fill category to be a factor
- use `.drop = F` in count

Notice that applying `count()`, you haves some counts of zero.  

Here we are using geom_col, which by default does no statistical transformation on the data -- it is an 'individual' geom in it's native state; i.e. puts one geom/mark on the plot per row in the data.  goem_bar is just a shortcut to geom_col(stat = "count") - it is a collective geom; i.e. puts one geom/mark on the plot for several rows in the data.   


```{r waldo, include=F}
set.seed(12456)
num <- 10
tibble(type = sample(LETTERS[1:2], num, replace = T) ,
       state = sample(state.abb[1:3], num, replace = T) ,
       event_occurs = sample(c("Yes", "No"), num, replace = T) %>% 
         factor()) %>% 
  count(type, state, event_occurs,.drop = F) %>% 
  ggplot() + 
  aes(x = type, y = n, fill = event_occurs) +
  facet_grid(state~.) +
  geom_col(position = "dodge", 
           width = 0.7,
           color = "grey35") +
  geom_text(aes(label = n), 
            position = position_dodge(width = .7), 
            vjust = -0.5) +
  scale_y_continuous(limits = c(0,4))
```


```{r}
library(flipbookr)
embed_flipbook("waldo", 
               font_size = 100, 
               use_embed_xaringan = T,
               use_share_again = T,
               widths = c(1.2,1))
```


How do you expect this figure to change if the variables state and type are also factors?

---

# Isn't `position_dodge(preserve = "single")`, "waldo"?


Don't I get 'waldo' with position_dodge(preserve = "single"))? 

No. In the most popular answer to this question"don't drop zero count dodged barplot" on stack overflow, it looks like preserve = 'single' gives you 'waldo'. But this isn't the case. The order of the factor is just opportune for the alignment in that example - but look at what happens if the factor order is reversed:  

https://stackoverflow.com/questions/10326729/dont-drop-zero-count-dodged-barplot

```{r position_single, include = F}
ggplot(data = mtcars) +
  aes(x = factor(cyl)) +
  aes(fill = factor(vs)) + #ROTATE
  aes(fill = fct_rev(factor(vs))) + #ROTATE
  labs(fill = "vs") +
  geom_bar(position = position_dodge(preserve = "single"))
```


```{r}
embed_flipbook("position_single", 
               break_type = "rotate",
               font_size = 100, 
               use_embed_xaringan = T,
               use_share_again = T,
               widths = c(1.2,1))
```



```{r, echo = F, eval = F}
library(magrittr)
Titanic %>% 
  as.data.frame() %>% 
  uncount(weights = Freq) %$%
  table(Survived) %>% #ROTATE
  table(Survived, Sex) %>% #ROTATE
  table(Survived, Sex, Class) %>% #ROTATE
  plot()
```



```{r, echo = T}
sessionInfo(package = "ggplot2")[[7]]
```


